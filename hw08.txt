;Lee, Alison
;4340
;MKS21 Period1
;2015-10-3
;HW 08	

;1 
(define makeEven 
  (lambda (x)
    (if (  = ( remainder x 2 ) 0 ) x ( + x 1 ))))

;Testing...
(makeEven 3)
(makeEven 2)
(makeEven 1)
(makeEven 0)

;----------

;2
(define checkSign
  (lambda (x)
    ( if ( > x 0 ) 1
        ( if ( < x 0 ) 2 3 ))))

;Testing...
(checkSign 4)
(checkSign -3)
(checkSign 0)

;----------
 
;3
(define disc
  (lambda (a b c)
    ( - ( * b b ) ( * 4 a c ))))

(define howManyRoots
  (lambda (a b c)
    (if ( < (disc a b c) 0 ) 0
        (if ( > (disc a b c) 0 ) 2 1 ))))

;Testing...    
(howManyRoots 2 6 3)
(howManyRoots 1 -8 16)
(howManyRoots 4 5 3)

;----------

;4
(define myQuotient
  (lambda (a b)
    ( / ( - a ( remainder a b )) b )))

;Testing...
(myQuotient 10 3)
(myQuotient 10 4)
(myQuotient 9 3)

;----------

;5a
(define isPyTriple
  (lambda (a b c)
    (if (and
         ( > ( + a b ) c )
         ( > ( + a c ) b )
         ( > ( + b c ) a ))
        #t #f)))

;Testing...
(isPyTriple 1 2 3)
(isPyTriple 4 5 6)

;5b
(define leapyear
  (lambda (year)
    (if ( = (remainder year 400) 0 ) #t
        (if ( and ( = ( remainder year 4 ) 0 )
              ( > ( remainder year 100 ) 0 )) #t #f ))))

;Testing...
(leapyear 1974)
(leapyear 2000)
(leapyear 2400)
